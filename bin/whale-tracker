#!/usr/bin/env node

/**
 * Main CLI for Binance Whale Tracker
 */

const { Command } = require('commander');
const chalk = require('chalk');
const { WhaleTracker } = require('../src');
const package = require('../package.json');

const program = new Command();

// Configure CLI
program
    .name('whale-tracker')
    .description('Professional Binance trading toolkit with whale monitoring')
    .version(package.version);

// Start command
program
    .command('start')
    .description('Start whale tracking for specified symbols')
    .option('-s, --symbols <symbols...>', 'Symbols to track (e.g., BTCUSDT ETHUSDT)')
    .option('-i, --interval <interval>', 'Monitoring interval', '60')
    .option('--no-telegram', 'Disable Telegram notifications')
    .option('--no-dashboard', 'Disable live dashboard')
    .option('--config <path>', 'Path to config file')
    .action(async (options) => {
        try {
            console.log(chalk.cyan('\n🐋 Starting Whale Tracker...\n'));

            const tracker = new WhaleTracker(options.config ? require(options.config) : {});
            await tracker.initialize();

            const symbols = options.symbols || ['BTCUSDT', 'ETHUSDT'];

            // Start monitoring each symbol
            for (const symbol of symbols) {
                console.log(chalk.yellow(`📊 Monitoring ${symbol}...`));
                await tracker.startMonitoring(symbol, {
                    interval: options.interval,
                    telegram: options.telegram
                });
            }

            // Start dashboard if enabled
            if (options.dashboard) {
                await tracker.startDashboard(symbols);
            }

            console.log(chalk.green('\n✅ Whale Tracker is running!'));
            console.log(chalk.gray('Press Ctrl+C to stop\n'));

            // Handle shutdown
            process.on('SIGINT', async () => {
                console.log(chalk.yellow('\n\nShutting down...'));
                await tracker.shutdown();
                process.exit(0);
            });

        } catch (error) {
            console.error(chalk.red('Error:'), error.message);
            process.exit(1);
        }
    });

// Status command
program
    .command('status')
    .description('Show current tracker status')
    .action(async () => {
        try {
            const tracker = new WhaleTracker();
            await tracker.initialize();

            const status = tracker.getStatus();

            console.log(chalk.cyan('\n📊 Whale Tracker Status\n'));
            console.log(chalk.white('Active Monitors:'), status.activeMonitors.join(', ') || 'None');
            console.log(chalk.white('Active Alerts:'), status.activeAlerts);
            console.log(chalk.white('APIs Connected:'));
            console.log('  Binance:', status.apis.binance ? chalk.green('✓') : chalk.red('✗'));
            console.log('  CryptoQuant:', status.apis.cryptoQuant ? chalk.green('✓') : chalk.red('✗'));
            console.log('  Telegram:', status.apis.telegram ? chalk.green('✓') : chalk.red('✗'));
            console.log(chalk.white('Dashboard:'), status.dashboard);

            await tracker.shutdown();
        } catch (error) {
            console.error(chalk.red('Error:'), error.message);
            process.exit(1);
        }
    });

// List supported symbols
program
    .command('symbols')
    .description('List supported trading symbols')
    .action(() => {
        console.log(chalk.cyan('\n📈 Supported Symbols\n'));
        const symbols = [
            'BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT', 'XRPUSDT',
            'ADAUSDT', 'DOGEUSDT', 'AVAXUSDT', 'DOTUSDT', 'MATICUSDT'
        ];
        symbols.forEach(s => console.log(`  • ${s}`));
        console.log(chalk.gray('\nYou can track any valid Binance symbol\n'));
    });

// Parse arguments
program.parse(process.argv);

// Show help if no command provided
if (!process.argv.slice(2).length) {
    program.outputHelp();
}