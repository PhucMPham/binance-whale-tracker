#!/usr/bin/env node

/**
 * Dashboard CLI for Binance Whale Tracker
 */

const { Command } = require('commander');
const chalk = require('chalk');
const { WhaleTracker } = require('../src');

const program = new Command();

program
    .name('whale-dashboard')
    .description('Launch interactive dashboard for real-time monitoring')
    .version('1.0.0');

// Live dashboard command
program
    .command('live')
    .description('Start live monitoring dashboard')
    .option('-s, --symbols <symbols...>', 'Symbols to monitor', ['BTCUSDT', 'ETHUSDT'])
    .option('-i, --interval <seconds>', 'Update interval', '5')
    .option('--no-whale', 'Disable whale monitoring')
    .option('--no-technical', 'Disable technical indicators')
    .option('--compact', 'Use compact view')
    .action(async (options) => {
        try {
            console.log(chalk.cyan('\nðŸš€ Starting Live Dashboard...\n'));

            const tracker = new WhaleTracker();
            await tracker.initialize();

            const dashboardOptions = {
                updateInterval: parseInt(options.interval) * 1000,
                showWhales: options.whale,
                showTechnical: options.technical,
                compact: options.compact
            };

            await tracker.startDashboard(options.symbols, dashboardOptions);

            console.log(chalk.green('âœ… Dashboard is running!'));
            console.log(chalk.gray('Press "q" to quit, "h" for help\n'));

            // Handle shutdown
            process.on('SIGINT', async () => {
                await tracker.stopDashboard();
                await tracker.shutdown();
                process.exit(0);
            });

        } catch (error) {
            console.error(chalk.red('Error:'), error.message);
            process.exit(1);
        }
    });

// Simple view command
program
    .command('simple [symbol]')
    .description('Simple real-time price display')
    .option('-i, --interval <seconds>', 'Update interval', '2')
    .action(async (symbol = 'BTCUSDT', options) => {
        try {
            console.log(chalk.cyan(`\nðŸ’¹ Simple Price Monitor - ${symbol}\n`));

            const tracker = new WhaleTracker();
            await tracker.initialize();

            let lastPrice = 0;
            let priceHistory = [];

            // Price update loop
            setInterval(async () => {
                try {
                    const analysis = await tracker.analyzeCoin(symbol, {
                        interval: '1m',
                        simple: true
                    });

                    const price = analysis.currentPrice;
                    const change = price - lastPrice;
                    const changePercent = lastPrice ? ((change / lastPrice) * 100).toFixed(2) : 0;

                    priceHistory.push(price);
                    if (priceHistory.length > 20) priceHistory.shift();

                    // Clear and redraw
                    console.clear();
                    console.log(chalk.cyan(`\nðŸ’¹ ${symbol} Price Monitor\n`));

                    // Price display
                    const priceColor = change > 0 ? chalk.green :
                                      change < 0 ? chalk.red : chalk.white;
                    console.log(chalk.white('Current Price:'), priceColor(`$${price.toFixed(2)}`));

                    if (lastPrice) {
                        const arrow = change > 0 ? 'â†‘' : change < 0 ? 'â†“' : 'â†’';
                        console.log(chalk.white('Change:'), priceColor(`${arrow} ${changePercent}%`));
                    }

                    // Mini chart
                    console.log(chalk.white('\nPrice Trend:'));
                    drawMiniChart(priceHistory);

                    // Additional info
                    if (analysis.volume24h) {
                        console.log(chalk.white('\n24h Volume:'), `$${formatNumber(analysis.volume24h)}`);
                    }
                    if (analysis.rsi) {
                        const rsiColor = analysis.rsi > 70 ? chalk.red :
                                        analysis.rsi < 30 ? chalk.green : chalk.yellow;
                        console.log(chalk.white('RSI:'), rsiColor(analysis.rsi.toFixed(2)));
                    }

                    console.log(chalk.gray('\nPress Ctrl+C to exit'));

                    lastPrice = price;
                } catch (error) {
                    console.error(chalk.red('Update error:'), error.message);
                }
            }, parseInt(options.interval) * 1000);

            // Handle shutdown
            process.on('SIGINT', async () => {
                console.log(chalk.yellow('\n\nStopping monitor...'));
                await tracker.shutdown();
                process.exit(0);
            });

        } catch (error) {
            console.error(chalk.red('Error:'), error.message);
            process.exit(1);
        }
    });

// Stats command
program
    .command('stats')
    .description('Display market statistics dashboard')
    .option('-t, --top <number>', 'Number of top coins to show', '10')
    .action(async (options) => {
        try {
            console.log(chalk.cyan('\nðŸ“Š Market Statistics Dashboard\n'));

            const tracker = new WhaleTracker();
            await tracker.initialize();

            const symbols = [
                'BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT', 'XRPUSDT',
                'ADAUSDT', 'DOGEUSDT', 'AVAXUSDT', 'DOTUSDT', 'MATICUSDT'
            ].slice(0, parseInt(options.top));

            console.log(chalk.yellow('Loading market data...'));

            const stats = [];
            for (const symbol of symbols) {
                const analysis = await tracker.analyzeCoin(symbol, {
                    interval: '1h',
                    simple: true
                });
                stats.push({
                    symbol,
                    price: analysis.currentPrice,
                    change24h: analysis.change24h,
                    volume: analysis.volume24h,
                    rsi: analysis.rsi
                });
            }

            // Clear and display
            console.clear();
            console.log(chalk.cyan('\nðŸ“Š Market Statistics Dashboard\n'));

            // Sort by volume
            stats.sort((a, b) => b.volume - a.volume);

            console.log(chalk.white('Top by Volume:'));
            console.log(chalk.gray('Symbol\t\tPrice\t\t24h%\t\tVolume'));
            console.log('-'.repeat(60));

            stats.forEach(stat => {
                const changeColor = stat.change24h > 0 ? chalk.green : chalk.red;
                console.log(
                    `${stat.symbol.padEnd(12)}` +
                    `$${stat.price.toFixed(2).padEnd(12)}` +
                    changeColor(`${stat.change24h?.toFixed(2) || '0.00'}%`.padEnd(12)) +
                    `$${formatNumber(stat.volume)}`
                );
            });

            // Market summary
            const avgChange = stats.reduce((sum, s) => sum + (s.change24h || 0), 0) / stats.length;
            const marketColor = avgChange > 0 ? chalk.green : chalk.red;
            console.log(chalk.white('\nMarket Summary:'));
            console.log('Average Change:', marketColor(`${avgChange.toFixed(2)}%`));
            console.log('Total Volume:', `$${formatNumber(stats.reduce((sum, s) => sum + s.volume, 0))}`);

            await tracker.shutdown();

        } catch (error) {
            console.error(chalk.red('Error:'), error.message);
            process.exit(1);
        }
    });

// Matrix view (like in movies!)
program
    .command('matrix')
    .description('Matrix-style monitoring view')
    .option('-s, --symbols <symbols...>', 'Symbols to monitor', ['BTCUSDT', 'ETHUSDT', 'BNBUSDT'])
    .action(async (options) => {
        try {
            console.log(chalk.green('\nâ£¿â£¿â£¿ ENTERING THE MATRIX â£¿â£¿â£¿\n'));

            const tracker = new WhaleTracker();
            await tracker.initialize();

            // Matrix-style updates
            setInterval(async () => {
                for (const symbol of options.symbols) {
                    try {
                        const analysis = await tracker.analyzeCoin(symbol, {
                            interval: '1m',
                            simple: true
                        });

                        // Random matrix-style output
                        const chars = '01';
                        let matrix = '';
                        for (let i = 0; i < 10; i++) {
                            matrix += chars.charAt(Math.floor(Math.random() * chars.length));
                        }

                        const priceStr = `${symbol}: $${analysis.currentPrice.toFixed(2)}`;
                        const output = `${chalk.green(matrix)} ${chalk.white(priceStr)} ${chalk.green(matrix)}`;
                        console.log(output);

                        // Occasionally show whale detection
                        if (Math.random() > 0.9) {
                            console.log(chalk.green(`â£¿â£¿â£¿ WHALE DETECTED: ${symbol} â£¿â£¿â£¿`));
                        }
                    } catch (error) {
                        // Silent fail for matrix effect
                    }
                }
            }, 500);

            // Handle shutdown
            process.on('SIGINT', async () => {
                console.log(chalk.green('\nâ£¿â£¿â£¿ EXITING THE MATRIX â£¿â£¿â£¿\n'));
                await tracker.shutdown();
                process.exit(0);
            });

        } catch (error) {
            console.error(chalk.red('Error:'), error.message);
            process.exit(1);
        }
    });

// Helper function to draw mini chart
function drawMiniChart(prices) {
    if (prices.length < 2) return;

    const min = Math.min(...prices);
    const max = Math.max(...prices);
    const range = max - min;
    const height = 5;

    const chart = [];
    for (let i = 0; i < height; i++) {
        chart.push([]);
    }

    prices.forEach(price => {
        const normalized = range ? ((price - min) / range) * (height - 1) : 0;
        const row = Math.round(height - 1 - normalized);

        for (let i = 0; i < height; i++) {
            if (i === row) {
                chart[i].push('â–ˆ');
            } else {
                chart[i].push(' ');
            }
        }
    });

    chart.forEach(row => {
        console.log(chalk.green('  ' + row.join('')));
    });
}

// Helper function to format large numbers
function formatNumber(num) {
    if (num >= 1e9) return (num / 1e9).toFixed(2) + 'B';
    if (num >= 1e6) return (num / 1e6).toFixed(2) + 'M';
    if (num >= 1e3) return (num / 1e3).toFixed(2) + 'K';
    return num.toFixed(2);
}

program.parse(process.argv);

if (!process.argv.slice(2).length) {
    program.outputHelp();
}